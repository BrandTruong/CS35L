705326397 Brandon Truong
Exercise 1.1
2. C-s H T M L Enter

3. C-s s c a v e n g e r Enter M-b

4. C-s s e l f - r e f e r e n t i a l Enter M-b M-b

5. C-s a r r o w Enter M-b

6. C-e

7. C-a

8. Yes, with emacs commands C-e and C-a

9. No

10. C-x C-c

Exercise 1.2
2. M-g g 1 9 Enter C-k

3. C-s < ! Enter C-a C-k

4. C-s < ! Enter C-a M-z > M-z >

5. C-s < ! Enter C-b C-b M-z > 
C-n C-a C-SP M-} M-} Backspace 
C-s < ! Enter C-a C-k

C-x C-c y
d i f f SP - u SP e x e r 1 . h t m l SP e x e r 2 . h t m l  SP > e x e r 2 . d i f f

Exercise 1.3
2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 4 2 y y q

3. C-r U T F Enter M-d M-d U S - A S C I I

4. C-M-s [ ^ [ : a s c i i : ] ] Enter C-a C-k

5. C-s < / o l > Enter Enter

6. C-x C-c y d i f f SP - u SP e x e r 1 . h t m l SP e x e r 3 . h t m l  SP > e x e r 3 . d i f f

Exercise 1.4
1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l

3. M-> C-r < Enter C-k M-g g 4 4 9 Enter C-y

4. C-s < ! Enter C-b C-b C-k M-g g 1 9 Enter C-y
M-> C-r < ! Enter C-p C-b C-x SP C-s + Enter C-p C-x r k C-e M-{ M-{ C-w C-u 4 Enter M-g g 4 8 5 Enter C-x r y M-g g 4 3 1 Enter C-SP C-e Backspace C-y
M-> C-r < ! Enter C-b C-x SP C-s + Enter C-p C-x r k C-SP C-e M-{ C-w M-g g 478 C-x r y M-g g 3 8 7 Enter C-y
M-> C-r < ! Enter C-k M-g g 1 3 1 Enter C-y

5. M-> C-SP C-r - - - Enter C-w 

6. C-y

7. - - > C-r - - - Enter < ! - -

8. M-< M-% < o l > Enter < o L > Enter !

We get 7 occurences replaced

C-x C-c
9. d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l  SP > e x e r 4 . d i f f

Exercise 1.5
1. M-x m k d i r Enter ~ / j u n k Enter

2. C-x C-f ~ / h e l l o . c Enter RightMouseClick C-x C-s

3. M-x c o m p i l e Enter C-a C-k g c c SP h e l l o . c Enter

4. C-x b h e l l o - o u t Enter C-u M-! . / a . o u t Enter

5. C-x h M-w C-x C-f ~ / k e y 1 . t x t M-> C-y

EOF on input

Exercise 1.6
1. C-x b Enter

2. m o s t - n e g a t i v e - f i x n u m C-j
m o s t - p o s i t i v e - f i x n u m C-j
( f o r m a t SP " % x " SP m o s t - p o s i t i v e - f i x n u m ) C-j
( f o r m a t SP " % x " SP m o s t - n e g a t i v e - f i x n u m ) C-j

Gives us the results:
most-negative-fixnum
-2305843009213693952
"2000000000000000"

most-positive-fixnum
2305843009213693951
"1fffffffffffffff"

The largest value in a 64-bit platform that emacs lisp can handle is 2^61-1 and the smallest is -2^61, which correlates to the values given.

3. ( r a n d o m  SP " 7 0 5 - 3 2 6 - 3 8 7 " ) C-j
567835432448642130

4. ( s e t q  SP x SP ( r a n d o m ) ) C-j
( s e t q  SP y SP ( r a n d o m ) ) C-j

We get:
x = 897727355280681517
y = -1715440862882358715

5. ( s e t q SP p SP ( * SP x SP y ) )
( s e t q SP r SP ( l o g i o r SP p SP m o s t - n e g a t i v e - f i x n u m ) )

We get:
p = -746107506767712223
r = -746107506767712223

6. 
R is not mathematically correct since the product of x and y should evaluate to -1.5399982e+36, which is past most-negative and thus overflows.

7. The two integers are not truly random in the mathematical sense since x and y are both limited in terms of value, since emacs lisp has a largest and smallest possible value. This means that we cannot have all possible values due to the constraint. We also can see that random uses a seed to generate numbers, which means that the number is not truly random and can be repeatable if we use the same seed.

8.  Since the most-positive-fixnum and most-negative-fixnum are the contraints of representable values in emacs lisp, this means that the product of x and y have to be within 2^61-1 and -2^61. Assuming truly random values, from positive infinity to negative infinity, this means that the probability of being within the constraint is (all possible combinations of x and y whose products are within the constraint) / infinity, which we can generalize to equal 0 (since we divide by infinity). This means that the chances of r being mathematically correct is extremely unlikely (almost 0) according to the probability calculated previously.

