 Brandon Truong

1. I first obtained the diffutils from ~eggert/src/gnu/diffutils by using
COMMAND: git clone ~eggert/src/gnu/diffutils

2. I generated a log of changes by first going into the directory, then using
COMMAND: cd diffutils
COMMAND: git log > ~/Desktop/CS35L/Week8/git-log.txt

3. I generated a list of tags by doing the following inside of diffutils
COMMAND: git tag > ~/Desktop/CS35L/Week8/git-tags.txt

4. To find the quote "maint: quote 'like this' or "like this", not `like this'", I exited diffutils and into Week8 dir and used regex in emacs
COMMAND: cd ..
COMMAND: emacs git-log.txt
COMMAND: C-s "maint: quote 'like this' or "like this", not `like this'"

By using regex search forward inside the git-log.txt, we find that the the quote is found under

commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
Author: Paul Eggert <eggert@cs.ucla.edu>
Date:   Wed Jan 25 23:46:16 2012 -0800

We can then generate a patch by going back into the diffutils dir and using git format
COMMAND: cd diffutils
COMMAND: git format-patch -1 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f --stdout > ~/Desktop/CS35L/Week8/quote-patch.txt

5. We can check out version 3.0 Diffutils by doing
COMMAND: git checkout v3.0

6. We can patch quote-patch.txt to version 3.0 since we are already in v3.0 and by doing
COMMAND: patch -p1 < ~/Desktop/CS35L/Week8/quote-patch.txt

We see that some files could not be found, thus failing certain hunks. during the dialogs:

can't find file to patch at input line 62
Perhaps you used the wrong -p or --strip option?

can't find file to patch at input line 249
Perhaps you used the wrong -p or --strip option?

can't find file to patch at input line 262
Perhaps you used the wrong -p or --strip option?

They ask for the file to patch with
File to patch:
Skip this patch? [y] y
Skipping patch.

which we skipped by clicking 'Enter' and 'y'

Our errors include failing HACKING, diffutils.texi, help2man, and certain hunks

--Snippet of patch errors---

|
|diff --git a/HACKING b/HACKING
|index 3a99833..522e0b5 100644
|--- a/HACKING
|+++ b/HACKING
--------------------------
File to patch:
Skip this patch? [y] y
Skipping patch.
1 out of 1 hunk ignored
Hunk #1 FAILED at 9.
Hunk #3 FAILED at 60.
2 out of 3 hunks FAILED -- saving rejects to file README.rej
patching file README-hacking
Hunk #1 FAILED at 19.
1 out of 1 hunk FAILED -- saving rejects to file README-hacking.rej
patching file TODO
patching file cfg.mk
Hunk #1 FAILED at 29.
1 out of 1 hunk FAILED -- saving rejects to file cfg.mk.rej
patching file doc/diagmeet.note
can't find file to patch at input line 249
Perhaps you used the wrong -p or --strip option?
The text leading up to this was:
--------------------------
|diff --git a/doc/diffutils.texi b/doc/diffutils.texi
|index 58b140c..00403df 100644
|--- a/doc/diffutils.texi
|+++ b/doc/diffutils.texi
--------------------------
File to patch:
Skip this patch? [y] y
Skipping patch.
1 out of 1 hunk ignored
can't find file to patch at input line 262
Perhaps you used the wrong -p or --strip option?
The text leading up to this was:
--------------------------
|diff --git a/man/help2man b/man/help2man
|index f9983f7..8bc961c 100755
|--- a/man/help2man
|+++ b/man/help2man
--------------------------
File to patch:
Skip this patch? [y] y
Skipping patch.
9 out of 9 hunks ignored
Hunk #10 FAILED at 876.
Hunk #11 FAILED at 906.
Hunk #12 FAILED at 942.
3 out of 14 hunks FAILED -- saving rejects to file src/diff.c.rej
Hunk #6 FAILED at 433.
1 out of 9 hunks FAILED -- saving rejects to file src/diff3.c.rej

7. We can get an overview of what happened by doing
COMMAND: git status

giving us:

HEAD detached at v3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   NEWS
        modified:   README
        modified:   TODO
        modified:   doc/diagmeet.note
        modified:   ms/config.bat
        modified:   ms/config.site
        modified:   po/en.po
        modified:   src/analyze.c
        modified:   src/cmp.c
        modified:   src/context.c
        modified:   src/diff.c
        modified:   src/diff.h
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/ifdef.c
        modified:   src/io.c
        modified:   src/sdiff.c
        modified:   src/side.c
        modified:   src/system.h
        modified:   src/util.c
        modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        NEWS.orig
        README-hacking.orig
        README-hacking.rej
        README.orig
        README.rej
        cfg.mk.orig
        cfg.mk.rej
        ms/config.site.orig
        src/cmp.c.orig
        src/context.c.orig
        src/diff.c.orig
        src/diff.c.rej
        src/diff.h.orig
        src/diff3.c.orig
        src/diff3.c.rej
        src/dir.c.orig
        src/sdiff.c.orig
        src/system.h.orig
        src/util.c.orig
        tests/help-version.orig

no changes added to commit (use "git add" and/or "git comm
8. I read the gnu pages on the emacs functions in order to understand what they do and how to use them. I then tested them on the first modified file, NEWS by doing
COMMAND: C-x v u

canceling it by saying no, then.
COMMAND: C-x v =
COMMAND: C-h m

9. We can see that the modified files that do not end in .c include:

	modified:   NEWS
        modified:   README
        modified:   TODO
        modified:   doc/diagmeet.note
        modified:   ms/config.bat
        modified:   ms/config.site
        modified:   po/en.po
        modified:   src/diff.h
        modified:   src/system.h
        modified:   tests/help-version

We can revert this by using vc-revert (C-x v u) on them
COMMAND: emacs 'filename'
COMMAND: C-x v u

It will prompt us with:

Discard changes in 1 file? (yes or no)

We can then type yes to discard changes in the non-c files, then
COMMAND: C-x-c

to exit the file and move to the next.
We can then check the c files by looking at git status

 	modified:   src/analyze.c
        modified:   src/cmp.c
        modified:   src/context.c
        modified:   src/diff.c
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/ifdef.c
        modified:   src/io.c
        modified:   src/sdiff.c
        modified:   src/side.c
        modified:   src/util.c

We can revert all changes except for character string constants by doing
COMMAND: emacs 'filename'
COMMAND: C-x v =

Inside vc-diff, we can see if a change was made to a const char string or not
- stands for original and + for changed.

We can then modify by returning to the main file 
(To switch from the file and vc-diff buffer I use 
COMMAND: C-x <leftarrow>/<rightarrow> )
 
and doing
COMMAND: M-g g 'line#'

to go to the changed line(s), and manually reverting it if needed (revert comments),
then saving and exiting with
COMMAND: C-x C-c 

'y' when prompted
Most manual reverts consists of changing the starting ' to ` and sometimes " to '' or ``
Some files can be reverted easily if they don't have certain changes we want to keep by doing, such as analyze.c, etc.

COMMAND: C-x v u

---files reverted---
analyze.c - @@ lines 38, 251, 595
	reverted lines 41, 254, 598
cmp.c - @@ lines 36, 115, 134, 185, 231, 269, 364, 377
	reverted lines 39, 367-378, 380
context.c - @@ lines 159, 289, 393, 431, 459
	reverted lines 162, 292, 396, 434, 462
diff.c - @@ lines 40, 57, 92, 330, 505, 534, 585, 744, 826, 960, 1159
	reverted lines 43, 60-62, 95
diff3.c - @@ lines 35, 159, 316, 351, 412, 460, 1275, 1475
	reverted lines 38, 162, 1478
dir.c - @@ lines 84, 125, 154, 234
	reverted lines 87, 128, 237
ifdef.c - @@ lines 132
	reverted lines 135
io.c - @@ lines 57
	reverted lines 60, 63, 
sdiff.c - @@ lines 35, 92, 175, 230, 286, 572, 747
	reverted lines 38, 95, 750
side.c - @@ lines 292, 302, 310
	reverted lines 295, 305, 313
util.c - @@ lines 27, 121, 146, 190, 241, 270, 298, 650
	reverted lines 30, 124, 146, 193, 244, 273, 653

10. We can see the rejects by doing
COMMAND: emacs src/*.c.rej

we can see two rejects are made on: 
diff.c       diff3.c

I noticed that my rejects does not have matching line ordering, hence the use of C-s to find the lines.

COMMANDS: emacs diff.c
M-g g 876
C-s paginate

Then to replace ` with ', I did
COMMANDS: C-s `
<backspace>
'

COMMANDS: C-r ifdef
C-s `
<backspace>
'

C-s LTYPE is

Then repeat 4 times:
COMMANDS: C-s `
<backspace>
'

C-s FILES

Then repeat 4 times:
COMMANDS:
C-s `
<backspace>
'

C-s If a
C-s `
<backspace>
'

C-x C-c to save the patching in diff.c

We then move to diff3.c by doing
COMMANDS: emacs src/diff3.c
M-g g 433
C-s -i

Then repeat 2 times:
COMMANDS: C-s `
<backspace>
'

11. I removed all untracked files by doing
COMMAND: git clean -n

to check if the list of untracked files match git status, then
COMMAND: git clean -f

to remove them.

12. We can check git status again
COMMAND: git status

giving us:

HEAD detached at v3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   src/cmp.c
        modified:   src/diff.c
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/sdiff.c
        modified:   src/util.c

no changes added to commit (use "git add" and/or "git commit -a")

We can then put the patch by doing
COMMAND: git diff > ~/Desktop/CS35L/Week8/quote-3.0-patch.txt

and check it's line count by doing 
COMMAND: wc -l < ~/Desktop/CS35L/Week8/quote-3.0-patch.txt

giving us 326, between 300-400.

13. 
COMMANDS: emacs README-hacking

Reading the file, we see that we have to do
COMMAND: ./bootstrap

Since I am on lnxsrv09, I do
COMMANDS: cd ..
wget https://web.cs.ucla.edu/classes/spring20/cs35L/assign/diffutils-gets.diff
cd diffutils
patch -p0 < ~/Desktop/CS35L/Week8/diffutils-gets.diff

then continue on with the instructions provided by README-hacking
COMMANDS: ./configure
make
make check

skipping cvs due to it being obsolete

We can then check
COMMANDS: ./src/diff . -
./src/diff --help

to see that they now use ' instead of `

14. To do a sanity test, we do
COMMANDS: cd ..
mkdir diffutils-3.0
mkdir diffutils-3.0-patch
git clone ~eggert/src/gnu/diffutils diffutils-3.0
cp -r diffutils/* diffutils-3.0-patch
cd diffutils-3.0
git checkout v3.0
cd ..
./diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch > quote-3.0-test.txt

15. We can then compare by doing
COMMAND: diff quote-3.0-test.txt quote-3.0-patch.txt

which gives us a list of differences, making the files not identical. However, many of the changes were minor such as different file paths.

< --- diffutils-3.0/src/dir.c   2020-05-29 04:47:35.356303000 -0700
< +++ diffutils-3.0-patch/src/dir.c     2020-05-29 05:16:21.745984000 -0700

and the like.
